


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DisplayResult, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000         ;
   11 00000000         ; Your program goes here!!!
   12 00000000         ;
   13 00000000 E3A02000        MOV              R2, #0
   14 00000004 E3A03000        MOV              R3, #0
   15 00000008 E3A04000        MOV              R4, #0      ;initialise the val
                                                            ues in R4, R6
   16 0000000C E3A06000        MOV              R6, #0
   17 00000010 E3A05000        MOV              R5, #0      ;where the result i
                                                            s stored
   18 00000014 E3A07000        MOV              R7, #0      ;negative flag
   19 00000018 E3A08000        MOV              R8, #0      ;Store the sign use
                                                            d - 1=+, 2=*, 3=-
   20 0000001C E3A0900A        LDR              R9, =10     ;Store the multipli
                                                            ng factor
   21 00000020         
   22 00000020         read
   23 00000020 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   24 00000024         
   25 00000024 E350000D        CMP              R0, #0x0D   ; while (key != CR)
                                                                 
   26 00000028 0A000018        BEQ              storeNumber ; { 
   27 0000002C EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   28 00000030         
   29 00000030         ;check for a sign
   30 00000030 E350002B        CMP              R0, #'+'    ;check for the + si
                                                            gn
   31 00000034 1A000001        BNE              checkSignMUL ;if not check for 
                                                            the next sign
   32 00000038 E3A08001        MOV              R8, #1      ;set the + flag
   33 0000003C EA000013        B                storeNumber ;store the number b
                                                            efore the sign
   34 00000040         
   35 00000040         checkSignMUL
   36 00000040 E350002A        CMP              R0, #'*'
   37 00000044 1A000001        BNE              checkSignSUB
   38 00000048 E3A08002        MOV              R8, #2
   39 0000004C EA00000F        B                storeNumber
   40 00000050         
   41 00000050         checkSignSUB
   42 00000050 E350002D        CMP              R0, #'-'
   43 00000054 1A000009        BNE              inputHandling ;if no sign is in
                                                            put, a number must 
                                                            have been input
   44 00000058         ;set a negative flag to store a negative number
   45 00000058 E3540000        CMP              R4, #0      ;check if a number 
                                                            has been input, if 
                                                            not then number sho



ARM Macro Assembler    Page 2 


                                                            uld be stored negat
                                                            ive
   46 0000005C 1A000005        BNE              subtraction ;if so its a subtra
                                                            ction
   47 00000060 E3570001        CMP              R7, #1
   48 00000064 0A000001        BEQ              unsetNegativeFlag ;look for dou
                                                            ble negatives
   49 00000068 E3A07001        MOV              R7, #1      ;store negative fla
                                                            g
   50 0000006C         continueNegativeHandling
   51 0000006C EAFFFFEB        B                read
   52 00000070         unsetNegativeFlag
   53 00000070 E3A07000        MOV              R7, #0      ;unset for double n
                                                            egatives
   54 00000074 EAFFFFFC        B                continueNegativeHandling
   55 00000078         
   56 00000078         subtraction                          ;set the operator f
                                                            lag to subtraction
   57 00000078 E3A08003        MOV              R8, #3
   58 0000007C EA000003        B                storeNumber
   59 00000080         
   60 00000080         inputHandling
   61 00000080 E0040499        MUL              R4, R9, R4  ;Multiply the previ
                                                            ous value stored in
                                                             R4 by ten, thus pe
                                                            rforming a left shi
                                                            ft
   62 00000084 E2400030        SUB              R0, R0, #0x30 ;convert the valu
                                                            e stored in R0 to a
                                                             numeric value from
                                                             ASCII code
   63 00000088 E0844000        ADD              R4, R4, R0  ;add the units colu
                                                            mn onto the result
   64 0000008C         
   65 0000008C EAFFFFE3        B                read
   66 00000090         
   67 00000090         
   68 00000090         
   69 00000090         
   70 00000090         
   71 00000090         storeNumber
   72 00000090 E3570001        CMP              R7, #1      ;check value of the
                                                             negative flag
   73 00000094 1A000001        BNE              skipNegativeHandler
   74 00000098 E2644000        RSB              R4, R4, #0  ;store the negative
                                                             number
   75 0000009C E3A07000        MOV              R7, #0      ;reset the negative
                                                             flag
   76 000000A0         
   77 000000A0         skipNegativeHandler
   78 000000A0         ;store number!
   79 000000A0         ;check the value in register 1 is 0
   80 000000A0 E3520000        CMP              R2, #0
   81 000000A4 1A000002        BNE              checkReg2
   82 000000A8 E1A02004        MOV              R2, R4
   83 000000AC E3A04000        MOV              R4, #0      ;reset the value in
                                                             R4 once it is stor
                                                            ed
   84 000000B0 EAFFFFDA        B                read



ARM Macro Assembler    Page 3 


   85 000000B4         checkReg2
   86 000000B4 E3530000        CMP              R3, #0
   87 000000B8 E1A03004        MOV              R3, R4
   88 000000BC E3A04000        MOV              R4, #0      ;reset the value in
                                                             R4 once it is stor
                                                            ed
   89 000000C0 EAFFFFFF        B                endRead
   90 000000C4         
   91 000000C4         endRead
   92 000000C4         ;check the sign register
   93 000000C4         ;addition
   94 000000C4 E3580001        CMP              R8, #1
   95 000000C8 1A000001        BNE              comp2
   96 000000CC E0825003        ADD              R5, R2, R3
   97 000000D0 EA000006        B                displayResult
   98 000000D4         comp2
   99 000000D4         ;multiplication
  100 000000D4 E3580002        CMP              R8, #2
  101 000000D8 1A000001        BNE              comp3
  102 000000DC E0050392        MUL              R5, R2, R3
  103 000000E0 EA000002        B                displayResult
  104 000000E4         comp3
  105 000000E4         ;subtraction
  106 000000E4 E3580003        CMP              R8, #3
  107 000000E8 E0425003        SUB              R5, R2, R3
  108 000000EC EAFFFFFF        B                displayResult
  109 000000F0         
  110 000000F0         
  111 000000F0         displayResult
  112 000000F0         ;show a = sign to the console
  113 000000F0 E3A0003D        MOV              R0, #'='
  114 000000F4 EBFFFFFE        BL               sendchar
  115 000000F8         
  116 000000F8         ;check value to output is a negative value
  117 000000F8 E3550000        CMP              R5, #0      ;if (R5 < 0)
  118 000000FC CA000002        BGT              outputHandler ;{
  119 00000100 E2655000        RSB              R5, R5, #0  ; make positive 
  120 00000104 E3A0002D        MOV              R0, #'-'    ; output "-"
  121 00000108 EBFFFFFE        BL               sendchar    ;}
  122 0000010C         
  123 0000010C         outputHandler
  124 0000010C         ;convert the value stored in R5 to decimal
  125 0000010C E1A0A005        MOV              R10, R5
  126 00000110         convertToDecimal
  127 00000110         
  128 00000110 E3A00000        MOV              R0, #0      ;Clear the value of
                                                             R0
  129 00000114 E3A06000        MOV              R6, #0      ;used to note when 
                                                            the most significan
                                                            t bit has been pass
                                                            ed
  130 00000118 E3A08001        MOV              R8, #1      ;a counter to hold 
                                                            the power of 10
  131 0000011C E3A09000        MOV              R9, #0      ;hold the power of 
                                                            ten being divided b
                                                            y
  132 00000120 E3A0C00A        MOV              R12, #10    ;the power of ten m
                                                            ultiplier
  133 00000124         mul10



ARM Macro Assembler    Page 4 


  134 00000124 E15A0008        CMP              R10, R8     ;if (R8< R10)
  135 00000128 BA000002        BLT              divStart    ;{
  136 0000012C E008089C        MUL              R8, R12, R8 ; R8 = R8 * 10
  137 00000130 E2899001        ADD              R9, R9, #1  ; counter = counter
                                                             + 1
  138 00000134 EAFFFFFA        B                mul10       ;}
  139 00000138         
  140 00000138         
  141 00000138         divStart
  142 00000138 E3A01001        MOV              R1, #1      ;initialise variabl
                                                            es to generate the 
                                                            dividing factor
  143 0000013C E1A02001        MOV              R2, R1
  144 00000140 E3A0C00A        MOV              R12, #10
  145 00000144         findExponent
  146 00000144 E1510009        CMP              R1, R9      ;if (current < high
                                                            est exponent)
  147 00000148 CA000002        BGT              continue    ;{
  148 0000014C E002029C        MUL              R2, R12, R2 ; LargestValue = R2
                                                             * 10, left shift i
                                                            n base 10
  149 00000150 E2811001        ADD              R1, R1, #1  ; R1 += 1
  150 00000154 EAFFFFFA        B                findExponent ;}
  151 00000158         
  152 00000158         continue
  153 00000158 EB000004        BL               div         ;preform the divisi
                                                            on to get the curre
                                                            nt digit for that b
                                                            ase
  154 0000015C EB00000A        BL               printAndConvert ;print the numb
                                                            er to the console
  155 00000160 E2499001        SUB              R9, R9, #1  ;decrease the power
                                                             for the division n
                                                            ext time round
  156 00000164 E3590000        CMP              R9, #0      ;
  157 00000168 0A000013        BEQ              endPrint    ;go to the end
  158 0000016C EAFFFFF1        B                divStart    ;
  159 00000170         
  160 00000170         div
  161 00000170 E1A0B00E        MOV              R11, LR     ;store the branch r
                                                            eturn address in R1
                                                            1
  162 00000174         divAc
  163 00000174 E15A0002        CMP              R10, R2     ;Compare the calcul
                                                            ation value with th
                                                            e highest power of 
                                                            10, ensure it does 
                                                            not overdivide
  164 00000178 BA000002        BLT              divLT
  165 0000017C E04AA002        SUB              R10, R10, R2 ;subtract until it
                                                            s less than the mul
                                                            tiplier ^^
  166 00000180 E2800001        ADD              R0, R0, #1  ;increase the value
                                                             of the output digi
                                                            t, R0 = R10 / base^
                                                            n (value of the ten
                                                            s, hundereds etc co
                                                            lumn)
  167 00000184 EAFFFFFA        B                divAc



ARM Macro Assembler    Page 5 


  168 00000188         divLT
  169 00000188 E12FFF1B        BX               R11
  170 0000018C         
  171 0000018C         printAndConvert
  172 0000018C E3500000        CMP              R0, #0      ;check if a zero
  173 00000190 0A000006        BEQ              checkMSB
  174 00000194         MSBcontinue
  175 00000194 E3A06001        MOV              R6, #1      ;set the MSB flag
  176 00000198 E2800030        ADD              R0, R0, #0x30 ;convert to ascii
                                                            
  177 0000019C E1A0C00E        MOV              R12, LR
  178 000001A0 EBFFFFFE        BL               sendchar    ;print to console  
                                                            
  179 000001A4 E3A00000        MOV              R0, #0      ;reset R0
  180 000001A8 E12FFF1C        BX               R12
  181 000001AC         skipPrint
  182 000001AC E12FFF1E        BX               LR
  183 000001B0         checkMSB
  184 000001B0 E3560000        CMP              R6, #0      ;check if the MSB h
                                                            as been passed
  185 000001B4 0AFFFFFC        BEQ              skipPrint   ;if not, dont print
                                                             a digit
  186 000001B8 EAFFFFF5        B                MSBcontinue ;if so print
  187 000001BC         
  188 000001BC         endPrint
  189 000001BC E1A0000A        MOV              R0, R10
  190 000001C0 E2800030        ADD              R0, R0, #0x30
  191 000001C4 EBFFFFFE        BL               sendchar
  192 000001C8         
  193 000001C8 EAFFFFFE 
                       stop    B                stop
  194 000001CC         
  195 000001CC                 END
Command Line: --debug --xref --apcs=interwork --depend=.\displayresult.d -o.\di
splayresult.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --prede
fine="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM
_INTVEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list
=.\displayresult.lst DisplayResult.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DisplayResult 00000000

Symbol: DisplayResult
   Definitions
      At line 1 in file DisplayResult.s
   Uses
      None
Comment: DisplayResult unused
MSBcontinue 00000194

Symbol: MSBcontinue
   Definitions
      At line 174 in file DisplayResult.s
   Uses
      At line 186 in file DisplayResult.s
Comment: MSBcontinue used once
checkMSB 000001B0

Symbol: checkMSB
   Definitions
      At line 183 in file DisplayResult.s
   Uses
      At line 173 in file DisplayResult.s
Comment: checkMSB used once
checkReg2 000000B4

Symbol: checkReg2
   Definitions
      At line 85 in file DisplayResult.s
   Uses
      At line 81 in file DisplayResult.s
Comment: checkReg2 used once
checkSignMUL 00000040

Symbol: checkSignMUL
   Definitions
      At line 35 in file DisplayResult.s
   Uses
      At line 31 in file DisplayResult.s
Comment: checkSignMUL used once
checkSignSUB 00000050

Symbol: checkSignSUB
   Definitions
      At line 41 in file DisplayResult.s
   Uses
      At line 37 in file DisplayResult.s
Comment: checkSignSUB used once
comp2 000000D4

Symbol: comp2
   Definitions
      At line 98 in file DisplayResult.s
   Uses
      At line 95 in file DisplayResult.s
Comment: comp2 used once
comp3 000000E4

Symbol: comp3



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 104 in file DisplayResult.s
   Uses
      At line 101 in file DisplayResult.s
Comment: comp3 used once
continue 00000158

Symbol: continue
   Definitions
      At line 152 in file DisplayResult.s
   Uses
      At line 147 in file DisplayResult.s
Comment: continue used once
continueNegativeHandling 0000006C

Symbol: continueNegativeHandling
   Definitions
      At line 50 in file DisplayResult.s
   Uses
      At line 54 in file DisplayResult.s
Comment: continueNegativeHandling used once
convertToDecimal 00000110

Symbol: convertToDecimal
   Definitions
      At line 126 in file DisplayResult.s
   Uses
      None
Comment: convertToDecimal unused
displayResult 000000F0

Symbol: displayResult
   Definitions
      At line 111 in file DisplayResult.s
   Uses
      At line 97 in file DisplayResult.s
      At line 103 in file DisplayResult.s
      At line 108 in file DisplayResult.s

div 00000170

Symbol: div
   Definitions
      At line 160 in file DisplayResult.s
   Uses
      At line 153 in file DisplayResult.s
Comment: div used once
divAc 00000174

Symbol: divAc
   Definitions
      At line 162 in file DisplayResult.s
   Uses
      At line 167 in file DisplayResult.s
Comment: divAc used once
divLT 00000188

Symbol: divLT
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 168 in file DisplayResult.s
   Uses
      At line 164 in file DisplayResult.s
Comment: divLT used once
divStart 00000138

Symbol: divStart
   Definitions
      At line 141 in file DisplayResult.s
   Uses
      At line 135 in file DisplayResult.s
      At line 158 in file DisplayResult.s

endPrint 000001BC

Symbol: endPrint
   Definitions
      At line 188 in file DisplayResult.s
   Uses
      At line 157 in file DisplayResult.s
Comment: endPrint used once
endRead 000000C4

Symbol: endRead
   Definitions
      At line 91 in file DisplayResult.s
   Uses
      At line 89 in file DisplayResult.s
Comment: endRead used once
findExponent 00000144

Symbol: findExponent
   Definitions
      At line 145 in file DisplayResult.s
   Uses
      At line 150 in file DisplayResult.s
Comment: findExponent used once
inputHandling 00000080

Symbol: inputHandling
   Definitions
      At line 60 in file DisplayResult.s
   Uses
      At line 43 in file DisplayResult.s
Comment: inputHandling used once
mul10 00000124

Symbol: mul10
   Definitions
      At line 133 in file DisplayResult.s
   Uses
      At line 138 in file DisplayResult.s
Comment: mul10 used once
outputHandler 0000010C

Symbol: outputHandler
   Definitions
      At line 123 in file DisplayResult.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 118 in file DisplayResult.s
Comment: outputHandler used once
printAndConvert 0000018C

Symbol: printAndConvert
   Definitions
      At line 171 in file DisplayResult.s
   Uses
      At line 154 in file DisplayResult.s
Comment: printAndConvert used once
read 00000020

Symbol: read
   Definitions
      At line 22 in file DisplayResult.s
   Uses
      At line 51 in file DisplayResult.s
      At line 65 in file DisplayResult.s
      At line 84 in file DisplayResult.s

skipNegativeHandler 000000A0

Symbol: skipNegativeHandler
   Definitions
      At line 77 in file DisplayResult.s
   Uses
      At line 73 in file DisplayResult.s
Comment: skipNegativeHandler used once
skipPrint 000001AC

Symbol: skipPrint
   Definitions
      At line 181 in file DisplayResult.s
   Uses
      At line 185 in file DisplayResult.s
Comment: skipPrint used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file DisplayResult.s
   Uses
      At line 5 in file DisplayResult.s
Comment: start used once
stop 000001C8

Symbol: stop
   Definitions
      At line 193 in file DisplayResult.s
   Uses
      At line 193 in file DisplayResult.s
Comment: stop used once
storeNumber 00000090

Symbol: storeNumber
   Definitions
      At line 71 in file DisplayResult.s
   Uses
      At line 26 in file DisplayResult.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 33 in file DisplayResult.s
      At line 39 in file DisplayResult.s
      At line 58 in file DisplayResult.s

subtraction 00000078

Symbol: subtraction
   Definitions
      At line 56 in file DisplayResult.s
   Uses
      At line 46 in file DisplayResult.s
Comment: subtraction used once
unsetNegativeFlag 00000070

Symbol: unsetNegativeFlag
   Definitions
      At line 52 in file DisplayResult.s
   Uses
      At line 48 in file DisplayResult.s
Comment: unsetNegativeFlag used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file DisplayResult.s
   Uses
      At line 23 in file DisplayResult.s
Comment: getkey used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file DisplayResult.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file DisplayResult.s
   Uses
      At line 27 in file DisplayResult.s
      At line 114 in file DisplayResult.s
      At line 121 in file DisplayResult.s
      At line 178 in file DisplayResult.s
      At line 191 in file DisplayResult.s

3 symbols
371 symbols in table
