


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Sets, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000         ;loop through each element in set A and find a match in 
                       setB, if a match is found, move on to the next item
    7 00000000         ;if a match is not found, write the item in setC
    8 00000000         ;do the same for set B, 
    9 00000000         ;also check within setC? could causing errors printing o
                       ut the same thing twice
   10 00000000         
   11 00000000 E3A04000        LDR              R4, =0      ;loopACounter = 0
   12 00000004 E59F5174        LDR              R5, =AElems ;addressA = address
                                                             of A elements
   13 00000008 E59F6174        LDR              R6, =ASize  ;TMP = address.Asiz
                                                            e
   14 0000000C E5966000        LDR              R6, [R6]    ;numberInA = Memory
                                                            .word(TMP)
   15 00000010 E59FA170        LDR              R10, =BSize ;TMP = address.Bsiz
                                                            e
   16 00000014 E59AA000        LDR              R10, [R10]  ;numberInB = Memory
                                                            .word(TMP)
   17 00000018 E59F216C        LDR              R2, =CElems ;addressC (For Addi
                                                            ng)
   18 0000001C         
   19 0000001C         whileLoopA
   20 0000001C E3A03000        MOV              R3, #0      ;matchFoundFlag
   21 00000020         
   22 00000020 E1540006        CMP              R4, R6      ;while (loopACounte
                                                            r != numberInA)
   23 00000024 0A000025        BEQ              endWhileLoopA ;{
   24 00000028 E2844001        ADD              R4, R4, #1  ;loopACounter++
   25 0000002C E5957000        LDR              R7, [R5]    ;elemntA = Memory.w
                                                            ord(AddressA)
   26 00000030 E2855004        ADD              R5, R5, #4  ;AddressA++ (increm
                                                            ent to next address
                                                            )
   27 00000034 E3A0B000        LDR              R11, =0     ;loopBCounter = 0
   28 00000038 E59F8150        LDR              R8, =BElems ;addressB 
   29 0000003C E3A01000        MOV              R1, #0      ;loopCCounter = 0
   30 00000040 E59FC144        LDR              R12, =CElems ;addressCChecking
   31 00000044 E59F0148        LDR              R0, =CSize  ;getSizeofC
   32 00000048 E5900000        LDR              R0, [R0]
   33 0000004C         
   34 0000004C         whileLoopB
   35 0000004C E15B000A        CMP              R11, R10    ;while (loopBCounte
                                                            r != numberInB)
   36 00000050 0A000007        BEQ              endWhileLoopB ;{
   37 00000054 E5989000        LDR              R9, [R8]    ;elementB = Memory.
                                                            word(AddressB)
   38 00000058 E2888004        ADD              R8, R8, #4  ;AddressB++ (increm
                                                            enet to next word a
                                                            ddress)
   39 0000005C E28BB001        ADD              R11, R11, #1 ;loopBcounter++
   40 00000060 E1570009        CMP              R7, R9      ;if (elementA == el
                                                            ementB)
   41 00000064 1A000001        BNE              notEqual    ;{
   42 00000068 E3A03001        MOV              R3, #1      ;matchFoundFlag = t



ARM Macro Assembler    Page 2 


                                                            rue
   43 0000006C EA000000        B                endWhileLoopB ;}
   44 00000070         notEqual
   45 00000070 EAFFFFF5        B                whileLoopB  ;}
   46 00000074         endWhileLoopB
   47 00000074         
   48 00000074         whileLoopC                           ;check the value is
                                                             not already found 
                                                            within the set
   49 00000074 E1510000        CMP              R1, R0      ;while (loopCCounte
                                                            r != numberInC)
   50 00000078 0A000007        BEQ              endWhileLoopC ;{
   51 0000007C E59C9000        LDR              R9, [R12]   ;elementC = Memory.
                                                            word(AddressC)
   52 00000080 E28CC004        ADD              R12, R12, #4 ;AddressC++ (incre
                                                            menet to next word 
                                                            address)
   53 00000084 E2811001        ADD              R1, R1, #1  ;loopCcounter++
   54 00000088 E1570009        CMP              R7, R9      ;if (elementA == el
                                                            ementC)
   55 0000008C 1A000001        BNE              notEqual2   ;{
   56 00000090 E3A03001        MOV              R3, #1      ;matchFoundFlag = t
                                                            rue
   57 00000094 EA000000        B                endWhileLoopC ;}
   58 00000098         notEqual2
   59 00000098 EAFFFFF5        B                whileLoopC
   60 0000009C         endWhileLoopC
   61 0000009C         
   62 0000009C E3530001        CMP              R3, #1      ;if (matchFound != 
                                                            true)
   63 000000A0 0A000005        BEQ              dontPutInC  ;{
   64 000000A4 E59F00E8        LDR              R0, =CSize  ;numberInCAdress 
   65 000000A8 E5901000        LDR              R1, [R0]    ;numberInC = Memory
                                                            .Word(numberInCAddr
                                                            ess)
   66 000000AC E2811001        ADD              R1, R1, #1  ;numberInC++
   67 000000B0 E5801000        STR              R1, [R0]    ;Memory.load(number
                                                            InCAddress, numberI
                                                            nC) 
   68 000000B4 E5827000        STR              R7, [R2]    ;Memory.load(addres
                                                            sC, element A)
   69 000000B8 E2822004        ADD              R2, R2, #4  ;addressC++ (move t
                                                            o next word)
   70 000000BC         dontPutInC                           ;}
   71 000000BC EAFFFFD6        B                whileLoopA  ;}
   72 000000C0         endWhileLoopA
   73 000000C0         
   74 000000C0         ;program does the exact same for next
   75 000000C0         ;now do the same for setB
   76 000000C0 E3A04000        LDR              R4, =0      ;loopBCounter = 0
   77 000000C4 E59F50C4        LDR              R5, =BElems ;addressA = address
                                                             of A elements
   78 000000C8 E59F60B8        LDR              R6, =BSize  ;TMP = address.Asiz
                                                            e
   79 000000CC E5966000        LDR              R6, [R6]    ;numberInB = Memory
                                                            .word(TMP)
   80 000000D0 E59FA0AC        LDR              R10, =ASize ;TMP = address.Bsiz
                                                            e
   81 000000D4 E59AA000        LDR              R10, [R10]  ;numberInA = Memory



ARM Macro Assembler    Page 3 


                                                            .word(TMP)
   82 000000D8         
   83 000000D8         whileLoopB2
   84 000000D8 E3A03000        MOV              R3, #0      ;matchFoundFlag
   85 000000DC E1540006        CMP              R4, R6      ;while (loopACounte
                                                            r != numberInA)
   86 000000E0 0A000025        BEQ              endWhileLoopB2 ;{
   87 000000E4 E2844001        ADD              R4, R4, #1  ;loopACounter++
   88 000000E8 E5957000        LDR              R7, [R5]    ;elemntA = Memory.w
                                                            ord(AddressA)
   89 000000EC E2855004        ADD              R5, R5, #4  ;AddressA++ (increm
                                                            ent to next address
                                                            )
   90 000000F0 E3A0B000        LDR              R11, =0     ;loopBCounter = 0
   91 000000F4 E59F8084        LDR              R8, =AElems ;addressB 
   92 000000F8 E3A01000        MOV              R1, #0      ;loopCCounter = 0
   93 000000FC E59FC088        LDR              R12, =CElems ;addressCChecking
   94 00000100 E59F008C        LDR              R0, =CSize  ;getSizeofC
   95 00000104 E5900000        LDR              R0, [R0]
   96 00000108         
   97 00000108         whileLoopA2
   98 00000108 E15B000A        CMP              R11, R10    ;while (loopBCounte
                                                            r != numberInB)
   99 0000010C 0A000007        BEQ              endWhileLoopA2 ;{
  100 00000110 E5989000        LDR              R9, [R8]    ;elementB = Memory.
                                                            word(AddressB)
  101 00000114 E2888004        ADD              R8, R8, #4  ;AddressB++ (increm
                                                            enet to next word a
                                                            ddress)
  102 00000118 E28BB001        ADD              R11, R11, #1 ;loopBcounter++
  103 0000011C E1570009        CMP              R7, R9      ;if (elementA == el
                                                            ementB)
  104 00000120 1A000001        BNE              notEqual3   ;{
  105 00000124 E3A03001        MOV              R3, #1      ;matchFoundFlag = t
                                                            rue
  106 00000128 EA000000        B                endWhileLoopA2 ;}
  107 0000012C         notEqual3
  108 0000012C EAFFFFF5        B                whileLoopA2 ;}
  109 00000130         endWhileLoopA2
  110 00000130         
  111 00000130         whileLoopC2                          ;check the value is
                                                             not already found 
                                                            within the set
  112 00000130 E1510000        CMP              R1, R0      ;while (loopCCounte
                                                            r != numberInC)
  113 00000134 0A000007        BEQ              endWhileLoopC2 ;{
  114 00000138 E59C9000        LDR              R9, [R12]   ;elementC = Memory.
                                                            word(AddressC)
  115 0000013C E28CC004        ADD              R12, R12, #4 ;AddressC++ (incre
                                                            menet to next word 
                                                            address)
  116 00000140 E2811001        ADD              R1, R1, #1  ;loopCcounter++
  117 00000144 E1570009        CMP              R7, R9      ;if (elementA == el
                                                            ementC)
  118 00000148 1A000001        BNE              notEqual4   ;{
  119 0000014C E3A03001        MOV              R3, #1      ;matchFoundFlag = t
                                                            rue
  120 00000150 EA000000        B                endWhileLoopC2 ;}
  121 00000154         notEqual4



ARM Macro Assembler    Page 4 


  122 00000154 EAFFFFF5        B                whileLoopC2
  123 00000158         endWhileLoopC2
  124 00000158         
  125 00000158 E3530001        CMP              R3, #1      ;if (matchFound != 
                                                            true)
  126 0000015C 0A000005        BEQ              dontPutInC2 ;{
  127 00000160 E59F002C        LDR              R0, =CSize  ;numberInCAdress 
  128 00000164 E5901000        LDR              R1, [R0]    ;numberInC = Memory
                                                            .Word(numberInCAddr
                                                            ess)
  129 00000168 E2811001        ADD              R1, R1, #1  ;numberInC++
  130 0000016C E5801000        STR              R1, [R0]    ;Memory.load(number
                                                            InCAddress, numberI
                                                            nC) 
  131 00000170 E5827000        STR              R7, [R2]    ;Memory.load(addres
                                                            sC, element A)
  132 00000174 E2822004        ADD              R2, R2, #4  ;addressC++ (move t
                                                            o next word)
  133 00000178         dontPutInC2                          ;}
  134 00000178 EAFFFFD6        B                whileLoopB2 ;}
  135 0000017C         endWhileLoopB2
  136 0000017C         
  137 0000017C EAFFFFFE 
                       stop    B                stop
  138 00000180         
  139 00000180 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             TestData, DATA, READWRITE
  140 00000000         
  141 00000000 00000008 
                       ASize   DCD              8           ; Number of element
                                                            s in A
  142 00000004 00000004 
              00000006 
              00000002 
              0000000D 
              00000013 
              00000007 
              00000001 
              00000003 AElems  DCD              4,6,2,13,19,7,1,3 
                                                            ; Elements of A
  143 00000024         
  144 00000024 00000006 
                       BSize   DCD              6           ; Number of element
                                                            s in B
  145 00000028 0000000D 
              00000009 



ARM Macro Assembler    Page 5 


              00000001 
              00000009 
              00000005 
              00000008 BElems  DCD              13,9,1,9,5,8 ; Elements of B
  146 00000040         
  147 00000040 00000000 
                       CSize   DCD              0           ; Number of element
                                                            s in C
  148 00000044 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    CElems  SPACE            56          ; Elements of C
  149 0000007C         
  150 0000007C                 END
Command Line: --debug --xref --apcs=interwork --depend=.\sets.d -o.\sets.o -IC:
\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips --pred
efine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_CLOCK_SET
UP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --
predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\sets.lst Sets.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Sets 00000000

Symbol: Sets
   Definitions
      At line 1 in file Sets.s
   Uses
      None
Comment: Sets unused
dontPutInC 000000BC

Symbol: dontPutInC
   Definitions
      At line 70 in file Sets.s
   Uses
      At line 63 in file Sets.s
Comment: dontPutInC used once
dontPutInC2 00000178

Symbol: dontPutInC2
   Definitions
      At line 133 in file Sets.s
   Uses
      At line 126 in file Sets.s
Comment: dontPutInC2 used once
endWhileLoopA 000000C0

Symbol: endWhileLoopA
   Definitions
      At line 72 in file Sets.s
   Uses
      At line 23 in file Sets.s
Comment: endWhileLoopA used once
endWhileLoopA2 00000130

Symbol: endWhileLoopA2
   Definitions
      At line 109 in file Sets.s
   Uses
      At line 99 in file Sets.s
      At line 106 in file Sets.s

endWhileLoopB 00000074

Symbol: endWhileLoopB
   Definitions
      At line 46 in file Sets.s
   Uses
      At line 36 in file Sets.s
      At line 43 in file Sets.s

endWhileLoopB2 0000017C

Symbol: endWhileLoopB2
   Definitions
      At line 135 in file Sets.s
   Uses
      At line 86 in file Sets.s
Comment: endWhileLoopB2 used once
endWhileLoopC 0000009C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: endWhileLoopC
   Definitions
      At line 60 in file Sets.s
   Uses
      At line 50 in file Sets.s
      At line 57 in file Sets.s

endWhileLoopC2 00000158

Symbol: endWhileLoopC2
   Definitions
      At line 123 in file Sets.s
   Uses
      At line 113 in file Sets.s
      At line 120 in file Sets.s

notEqual 00000070

Symbol: notEqual
   Definitions
      At line 44 in file Sets.s
   Uses
      At line 41 in file Sets.s
Comment: notEqual used once
notEqual2 00000098

Symbol: notEqual2
   Definitions
      At line 58 in file Sets.s
   Uses
      At line 55 in file Sets.s
Comment: notEqual2 used once
notEqual3 0000012C

Symbol: notEqual3
   Definitions
      At line 107 in file Sets.s
   Uses
      At line 104 in file Sets.s
Comment: notEqual3 used once
notEqual4 00000154

Symbol: notEqual4
   Definitions
      At line 121 in file Sets.s
   Uses
      At line 118 in file Sets.s
Comment: notEqual4 used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file Sets.s
   Uses
      At line 3 in file Sets.s
Comment: start used once
stop 0000017C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: stop
   Definitions
      At line 137 in file Sets.s
   Uses
      At line 137 in file Sets.s
Comment: stop used once
whileLoopA 0000001C

Symbol: whileLoopA
   Definitions
      At line 19 in file Sets.s
   Uses
      At line 71 in file Sets.s
Comment: whileLoopA used once
whileLoopA2 00000108

Symbol: whileLoopA2
   Definitions
      At line 97 in file Sets.s
   Uses
      At line 108 in file Sets.s
Comment: whileLoopA2 used once
whileLoopB 0000004C

Symbol: whileLoopB
   Definitions
      At line 34 in file Sets.s
   Uses
      At line 45 in file Sets.s
Comment: whileLoopB used once
whileLoopB2 000000D8

Symbol: whileLoopB2
   Definitions
      At line 83 in file Sets.s
   Uses
      At line 134 in file Sets.s
Comment: whileLoopB2 used once
whileLoopC 00000074

Symbol: whileLoopC
   Definitions
      At line 48 in file Sets.s
   Uses
      At line 59 in file Sets.s
Comment: whileLoopC used once
whileLoopC2 00000130

Symbol: whileLoopC2
   Definitions
      At line 111 in file Sets.s
   Uses
      At line 122 in file Sets.s
Comment: whileLoopC2 used once
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AElems 00000004

Symbol: AElems
   Definitions
      At line 142 in file Sets.s
   Uses
      At line 12 in file Sets.s
      At line 91 in file Sets.s

ASize 00000000

Symbol: ASize
   Definitions
      At line 141 in file Sets.s
   Uses
      At line 13 in file Sets.s
      At line 80 in file Sets.s

BElems 00000028

Symbol: BElems
   Definitions
      At line 145 in file Sets.s
   Uses
      At line 28 in file Sets.s
      At line 77 in file Sets.s

BSize 00000024

Symbol: BSize
   Definitions
      At line 144 in file Sets.s
   Uses
      At line 15 in file Sets.s
      At line 78 in file Sets.s

CElems 00000044

Symbol: CElems
   Definitions
      At line 148 in file Sets.s
   Uses
      At line 17 in file Sets.s
      At line 30 in file Sets.s
      At line 93 in file Sets.s

CSize 00000040

Symbol: CSize
   Definitions
      At line 147 in file Sets.s
   Uses
      At line 31 in file Sets.s
      At line 64 in file Sets.s
      At line 94 in file Sets.s
      At line 127 in file Sets.s

TestData 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: TestData
   Definitions
      At line 139 in file Sets.s
   Uses
      None
Comment: TestData unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Sets.s
   Uses
      None
Comment: main unused
1 symbol
368 symbols in table
